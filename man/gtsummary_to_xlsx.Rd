% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/export_to_xlsx.R
\name{gtsummary_to_xlsx}
\alias{gtsummary_to_xlsx}
\title{Export a \code{gtsummary} table object to a \code{.xlsx} document}
\usage{
gtsummary_to_xlsx(
  gtsummary_tbl,
  wb_path,
  sheet_name,
  add_date = TRUE,
  overwrite = FALSE
)
}
\arguments{
\item{gtsummary_tbl}{A table created with the \code{gtsummary} package.}

\item{wb_path}{Path to the .xlsx document. If it does not yet exist, it will
be created.}

\item{sheet_name}{Name of the sheet this table will receive, once entered
into the \code{.xlsx} document. If \code{FALSE}, it will be labelled by its
sheet number in the resulting document (i.e., if the document already has
two sheets, this new table's sheet name will be "Sheet 3"). Note, this param
intentionally received no default, to make it difficult for the user to
quickly dump a bunch of tables into a .xlsx document. Although this is easy
to do at the time or export, it tends to make it much harder for the
recipient to understand what is happening in a large document. For that
reason, if the user truly wants the convenience, the need to declare it
explicitly by setting this param to \code{FALSE}.}

\item{add_date}{If \code{TRUE}, a date be appended to the end of the file
name (\code{wb_path}) before export. For example, 'my_path.xlsx' will become
something like 'my_path_2020_01_25.xlsx' (using Sys.Date() for today's date).}

\item{overwrite}{If \code{TRUE}, existing file will be overwritten by
openxlsx::saveWorkbook() - which does the exportation already under the hood.
Note, under normal circumstances you actually want this to be \code{TRUE}
because the current function first loads any existing workbook into memory,
then adds a sheet to it, then exports. So, if your goal is to ADD the current
table to an existing sheet (which is usually the case), \code{overwrite}
should probably be set to \code{TRUE}.}
}
\value{
(invisible) The original \code{gtsummary_tbl}
}
\description{
Takes a \code{gtsummary} table object and exports it to to a \code{.xlsx}
document, using the \code{huxtable} and \code{openxlsx} libraries.
}
\details{
In theory, this function doesn't do much more than the existing
\code{gtsummary::as_hux_xlsx()} function. It's major contribution is a more
convenient workflow, which allows you to have a single filepath that you can
keep adding sheets to as an analysis (e.g., .Rmd document) expands. It also
has some convenience arguments to enhance the workflow
}
\examples{
library(outbox)
library(gtsummary)

tbl_1 <- trial \%>\%
  tbl_summary(include = c(age, grade, response)) \%>\%
  modify_caption('Table X. Here is a test caption')

fit <- glm(response ~ age + stage, trial, family = binomial)
tbl_2 <- fit \%>\%
  tbl_regression(exponentiate = TRUE)

# Create an output workbook
wb_path = 'my_output.xlsx'
gtsummary_to_xlsx(tbl_1, wb_path, sheet_name = FALSE, overwrite = FALSE)

# Add an additional table to that same path, with overwrite = TRUE
gtsummary_to_xlsx(tbl_2, wb_path, sheet_name = FALSE, overwrite = TRUE)
}
