% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/export.R, R/docx.R, R/xlsx.R
\name{write_output}
\alias{write_output}
\alias{gtsummary_to_docx}
\alias{ggplot_to_docx}
\alias{gtsummary_to_xlsx}
\alias{ggplot_to_xlsx}
\title{Write output to a document}
\usage{
write_output(x, path = NULL, label = FALSE, caption = NULL, append = TRUE, ...)

gtsummary_to_docx(
  x,
  path,
  label = FALSE,
  caption = NULL,
  append = TRUE,
  toc = TRUE,
  update_fields = FALSE
)

ggplot_to_docx(
  x,
  path,
  label = FALSE,
  caption = NULL,
  append = TRUE,
  toc = TRUE,
  update_fields = FALSE,
  height = 5,
  width = 6,
  res = 300
)

gtsummary_to_xlsx(x, path, label = FALSE, caption = NULL, append = TRUE)

ggplot_to_xlsx(
  x,
  path,
  label = FALSE,
  caption = NULL,
  append = TRUE,
  width = 6,
  height = 5,
  res = 300
)
}
\arguments{
\item{x}{A table with class "gtsummary" or a plot with class "ggplot"}

\item{path}{Path to the document, ending in \code{.xlsx} or \code{.docx}. If
it does not yet exist, it will be created. Note, if the path is not provided
(i.e., when set to its default, \code{path = NULL}), it will use the last
path used in a previous call to write_output() (which is retrieved via the
\code{last_path()} function).}

\item{label}{Character string. This will be used as either the name of the
sheet (must be unique for xlsx) this object will receive in the \code{.xlsx}
document or it will be used as the heading on this object's page in the
\code{.docx} document. If \code{FALSE} (the default), sheets will be labelled
by sheet number in the \code{.xlsx} workbook or by output type in the
\code{.docx} document. That is, if a workbook already has two sheets, this
new table's sheet name will be "Sheet 3". Alternatively, if the function is
working with a table being output to a \code{.docx} document, the heading of
the new page will simply be "Table".}

\item{caption}{Either \code{NULL} (the default) or a character string. If the
argument is \code{NULL}, nothing will be added to the document page/sheet. If
the argument is a character string, then this will be added as a text near
the input object (\code{x}) in the resulting document page/sheet. If the
output format is \code{.xlsx}, then the caption will be added to cell A1. If
the output format is \code{.docx}, then it will be appended as "Normal" style
text two lines below the primary \code{x} input.}

\item{append}{If \code{TRUE} (the default) the function will attempt to
append the newly created sheet/page to the end of the document, leaving all
the earlier components of the document intact. If \code{FALSE}, the function
will behave similarly to \code{base::write.csv()} and will write over the
entire original document. That is, it will delete the original document,
generate a new blank document, and finally place the newly created sheet
inside that blank document.}

\item{...}{Additional arguments to be passed to internal functions.}

\item{toc}{If a new \code{.docx} document is being created, should it also
include a table of contents?}

\item{update_fields}{Should the table of contents fields be updated after
the addition of this new output object (\code{x})? Note, \code{.docx}
documents will not auto-update TOC fields on their own. Normally, they need
MS Word to open them (and then the user will be prompted about whether they
want Word to attempt the updates it detects). If this parameter is set to
\code{TRUE}, the function will attempt to perform the updates on the object
itself. Note, this requires that the user has MS Word installed on the
current machine. Additionally, it tends to take several seconds to complete
this update, so the default choice is set to \code{FALSE}.}

\item{height}{The desired height of the plot (in inches).}

\item{width}{The desired width of the plot (in inches).}

\item{res}{The desired resolution of the plot (in ppi/dpi)}
}
\value{
(invisibly) The original, unmodified output object (\code{x})
}
\description{
Takes an object to be output and writes that object to a file. Currently,
supported output objects include \code{gtsummary} table and \code{ggplot}
plots. Supported document formats include \code{.xlsx} and \code{.docx}.
}
\details{
The \code{write_output()} function should be the only one of these
functions the user calls on a regular basis. Under the hood, this function
detects the object type and the file extension supplied by the user, then
chooses one of the other more specific functions to apply. For this reason,
it should be uncommon that the user needs to use any of the more specific
functions directly. However, they are made available to the end user to
potentially assist in debugging (e.g., the user wants to assess how the
\code{write_output()} function) is behaving internally.

Note, the functions given here are note designed to do much more
than the existing packages that they call underneath. For example, the
\code{gtsummary::as_hux_xlsx()} function already delivers much of the
convenience of \code{write_output()}.

So instead, the major contribution of these functions is a streamlined
workflow and interface across common output types and document formats. In
addition, these functions facilitate the repetitive appending of additional
output to the same file, which is useful for large analyses with multiple
important outputs.
}
\section{Parameter \code{label} vs. parameter \code{caption}}{


The difference between the \code{label} and \code{caption} is that label has
a special role in the document it is sent to. In a \code{.docx} document, it
will be a header at the top of a page. Visually, that will make it look more
like a title. It has the additional benefit of being automatically detectable
by MS Word's table of contents and other features. Likewise, \code{labels} in
\code{.xlsx} documents will serve as sheet names. Because \code{label} will
serve this titular role in both documents, it should ideally be short and
simply used to help the document recipient locate something for which the
reader might be searching.

In contrast, the \code{caption} string is just plain text that will appear
either above (\code{.xlsx}) or below (\code{.docx}) the output itself. It is
suitable for much longer descriptions, capable of providing detail and
context to the reader.

Note, neither \code{label} nor \code{caption} support anything other than
plain text (e.g., Rmarkdown).
}

\examples{
library(outbox)
library(gtsummary)

tbl_1 <- trial |>
  tbl_summary(include = c(age, grade, response)) |>
  modify_caption('Table 1. Drug trial results')

my_outbox <- tempfile(fileext = '.xlsx')

# starting with a blank output file (append = FALSE)
write_output(tbl_1, my_outbox, label = 'Drug trial results', append = FALSE)

tbl_2 <- mtcars |>
  lm(mpg ~ cyl + wt, data = _) |>
  tbl_regression()

# add an additional table to that same path, with append = TRUE
write_output(tbl_2, my_outbox, label = FALSE, append = TRUE)
}
\seealso{
Other write_output-related functions: 
\code{\link{construct_output_function}()},
\code{\link{detect_output_ext}()},
\code{\link{detect_output_type}()},
\code{\link{last_path}()}

Other docx-related functions: 
\code{\link{append_caption_docx}()},
\code{\link{create_docx}()}

Other docx-related functions: 
\code{\link{append_caption_docx}()},
\code{\link{create_docx}()}

Other xlsx-related functions: 
\code{\link{append_caption_xlsx}()},
\code{\link{create_xlsx}()}

Other xlsx-related functions: 
\code{\link{append_caption_xlsx}()},
\code{\link{create_xlsx}()}
}
\concept{docx-related functions}
\concept{write_output-related functions}
\concept{xlsx-related functions}
